/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes.reader;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.NoSuchElementException;

public class App {
    public static void main(String[] args) throws FileNotFoundException {
        //Make a new instance of  the QuoteReader class


        String urlString = "https://favqs.com/api/";
        String apiKey="c4b331ae5528ceed43adc50fa7788f25";
        URL favQuote;
        try {
            favQuote= new URL(urlString);
            HttpURLConnection quoteConnection = (HttpURLConnection) favQuote.openConnection();
            quoteConnection.

        } catch (MalformedURLException e) {
            System.out.println("Url does not work");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println("Connection did not work?");
            e.printStackTrace();
        }


        QuotesReader qr;
        //Insert the path into
        try {
            qr = new QuotesReader("src/main/resources/recentquotes.json");
        } catch (FileNotFoundException e) {
            System.out.printf("Quotes input file not found.");
            return;
        }

        //check if args are 0, if it is, will just run code to get a random quote
        if (args.length == 0) {
            System.out.println(qr.getQuotation().prettyPrint());
            return;
        }
        //if not it will trigger a certain if statement and excecute proper code
        if (args[0].equals("author")) {
            try {
                System.out.println(
                        qr.getQuotation(args[1], null, null).prettyPrint()
                );
            } catch (NoSuchElementException e) {
                System.out.printf("No quotes found by author %s\n", args[0]);
            }
            return;
        }

        if (args[0].equals("contains")) {
            try{
                System.out.println(
                        qr.getQuotation(null, null, args[1]).prettyPrint()
                );
            } catch (NoSuchElementException e) {
                System.out.printf("No quotes found containing the word %s\n", args[1]);
            }

            return;
        }

        if (args[0].equals("tag")) {
            try{
                System.out.println(
                        qr.getQuotation(null, args[1], null).prettyPrint()
                );
            } catch (NoSuchElementException e) {
                System.out.printf("No quotes found containing the tag %s\n", args[1]);
            }
            return;
        }
        //incase someone types help
        if (args[0].equals("help")) {
            System.out.println("Returns a random quote from our curated list of quotes.");
            System.out.println("Arguments: author [author-name]");
            System.out.println("Arguments: contains [word]");
            System.out.println("Arguments: tag [tag]");
            return;
        }

        System.out.printf("%s is not a valid argument. Type help to see arguments.", args[0]);

    }
}